#!/usr/bin/env python3

from test_framework.test_framework import BitcoinTestFramework
from test_framework.util import *
from test_framework.script import *
from test_framework.mininode import *
from test_framework.address import *


class QtumTransactionReceiptBloomFilterTest(BitcoinTestFramework):
    def set_test_params(self):
        self.setup_clean_chain = True
        self.num_nodes = 1
        self.extra_args = [['-logevents', '-txindex']]

    def skip_test_if_missing_module(self):
        self.skip_if_no_wallet()

    def run_test(self):
        self.nodes[0].generate(COINBASE_MATURITY+50)
        """
        pragma solidity >= 0.5.17;
        contract Greeter {
            event ListIndexedGreeting(address indexed greeter, string message);
            event ListUnindexedGreeting(address greeter, string message);
            event ListAccountValue(address indexed account, uint256 value);
            function greet_indexed(string memory message) public {
                emit ListIndexedGreeting(msg.sender, message);
            }
            function greet_unindexed(string memory message) public {
                emit ListUnindexedGreeting(msg.sender, message);
            }
            function get_account_val(uint256 value) public {
                emit ListAccountValue(msg.sender, value);
            }
        }
        """
        """
        Function signatures: 
        {
            "9f06a908": "get_account_val(uint256)",
            "378b8e93": "greet_indexed(string)",
            "3126af1c": "greet_unindexed(string)"
        }
        """

        contract_bytecode = "608060405234801561001057600080fd5b506103f9806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80633126af1c14610046578063378b8e93146101015780639f06a908146101bc575b600080fd5b6100ff6004803603602081101561005c57600080fd5b810190808035906020019064010000000081111561007957600080fd5b82018360208201111561008b57600080fd5b803590602001918460018302840111640100000000831117156100ad57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192905050506101ea565b005b6101ba6004803603602081101561011757600080fd5b810190808035906020019064010000000081111561013457600080fd5b82018360208201111561014657600080fd5b8035906020019184600183028401116401000000008311171561016857600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192905050506102bd565b005b6101e8600480360360208110156101d257600080fd5b8101908080359060200190929190505050610373565b005b7fd745aa0aba5ff43ae2ed3da2c13d614246c4d0b902544218da2b3d53e7c614e53382604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561027f578082015181840152602081019050610264565b50505050905090810190601f1680156102ac5780820380516001836020036101000a031916815260200191505b50935050505060405180910390a150565b3373ffffffffffffffffffffffffffffffffffffffff167f6666872cc79417abb8dbbf3dfe870a075ffe6abca793b19ee44b06203e9f4ae8826040518080602001828103825283818151815260200191508051906020019080838360005b8381101561033657808201518184015260208101905061031b565b50505050905090810190601f1680156103635780820380516001836020036101000a031916815260200191505b509250505060405180910390a250565b3373ffffffffffffffffffffffffffffffffffffffff167f321017b4ec93a5b534a9169bb1dafc27e1a018764fee8cba7bed1f9d320730f3826040518082815260200191505060405180910390a25056fea265627a7a72315820e40917b654a6f79cc6409d029d7f4afe35592a45c19f85937b4e49dfb6d1bf3c64736f6c63430005110032"
        contract_address = self.nodes[0].createcontract(contract_bytecode)[
            'address']
        self.nodes[0].generate(1)

        ret = self.nodes[0].sendtocontract(
            contract_address, "9f06a9080000000000000000000000000000000000000000000000000000000000000018")
        self.nodes[0].generate(1)
        assert('txid' in ret)
        assert('sender' in ret)
        assert('hash160' in ret)

        receipt = self.nodes[0].gettransactionreceipt(ret['txid'])

        assert('bloom' in receipt)
        assert(receipt['bloom'] == "00200000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000004000000000040000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000080000000000000000000000000000800000000000000000000000000000000000000000000000000")

        ret2 = self.nodes[0].sendtocontract(
            contract_address,
            "378b8e930000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000d746869732069732061206c6f6700000000000000000000000000000000000000"
        )

        assert('txid' in ret2)
        assert('sender' in ret2)
        assert('hash160' in ret2)

        receipt2 = self.node.gettransactionreceipt(ret2['txid'])

        assert('bloom' in receipt2)
        assert(receipt2['bloom'] == "00000000000000000000000000000080000000000000040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000200000000000000000000000000000000000000000000000000100000000000000000000000004000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080000000000000000000200000000000000000000000000000000000000000000000000000000000")


if __name__ == '__main__':
    QtumTransactionReceiptBloomFilterTest().main()
